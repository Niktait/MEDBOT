import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
from config import BOT_TOKEN
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import datetime


bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

—Å–æ—Å—Ç–æ—è–Ω–∏—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π = {}




def create_table():
    with sqlite3.connect('appointments.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS appointments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                fullname TEXT,
                birthdate TEXT,
                time TEXT,
                doctor TEXT,
                date TEXT
            )
        ''')
        conn.commit()

create_table()



def save_to_db(user_id, fullname, birthdate, time, doctor, date):
    with sqlite3.connect('appointments.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO appointments (user_id, fullname, birthdate, time, doctor, date)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (user_id, fullname, birthdate, time, doctor, date))
        conn.commit()


def fetch_appointments_from_db():
    with sqlite3.connect('appointments.db') as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM appointments")
        appointments = cursor.fetchall()
    return appointments

@dp.message_handler(commands=['showbase'])
async def cmd_showbase(message: types.Message):
    appointments = fetch_appointments_from_db()
    
    base_message = "–¢–µ–∫—É—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:\n"
    for appointment in appointments:
        base_message += f"ID: {appointment[0]}, –§–ò–û: {appointment[2]}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {appointment[3]}, –í—Ä–µ–º—è: {appointment[4]}, –í—Ä–∞—á: {appointment[5]}, –î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞: {appointment[6]}\n"
    
    group_chat_id = '-1002129410883'  
    await bot.send_message(group_chat_id, base_message)





@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    help_message = (
        "/start - –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞\n"
        "/info - –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–º —Ü–µ–Ω—Ç—Ä–µ\n"
        "/contact - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞"
    )
    await message.answer(help_message)

@dp.message_handler(commands=['info'])
async def cmd_info(message: types.Message):
    info_message = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä!\n"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —É—Å–ª—É–≥, –≤–∫–ª—é—á–∞—è —Ç–µ—Ä–∞–ø–∏—é, –º–∞—Å—Å–∞–∂, –õ–§–ö –∏ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã.\n"
        "–ù–∞—à–∏ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º."
    )
    await message.answer(info_message)

@dp.message_handler(commands=['contact'])
async def cmd_contact(message: types.Message):
    contact_message = (
        "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞:\n"
        "–ê–¥—Ä–µ—Å: —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +7 (123) 456-78-90\n"
        "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: info@medicalcenter.com"
    )
    await message.answer(contact_message)

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_name = message.from_user.first_name
    welcome_message = f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –ú–µ–Ω—è –∑–æ–≤—É—Ç –õ—è–π—Å–∞–Ω, —è –∑–∞–ø–∏—à—É –≤–∞—Å –∫ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É üòä\n\n–ü–æ–∑–≤–æ–ª—å—Ç–µ –∑–∞–¥–∞—Ç—å –≤–∞–º –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤:\n–ö –∫–∞–∫–æ–º—É –≤—Ä–∞—á—É –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å?"
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("–í—Ä–∞—á —Ç–µ—Ä–∞–ø–µ–≤—Ç", callback_data="doctor_therapist"),
    )
    keyboard.add(
        InlineKeyboardButton("–ú–∞—Å—Å–∞–∂–∏—Å—Ç", callback_data="masseur"),
    )
    keyboard.add(
        InlineKeyboardButton("–í—Ä–∞—á –õ–§–ö", callback_data="doctor_physiotherapist"),
    )
    keyboard.add(
        InlineKeyboardButton("–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥", callback_data="cosmetologist"),
    )
    await message.answer(welcome_message, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data in ['doctor_therapist', 'masseur', 'doctor_physiotherapist', 'cosmetologist'])
async def process_doctor(callback_query: types.CallbackQuery):
    doctor_map = {
        'doctor_therapist': '–í—Ä–∞—á —Ç–µ—Ä–∞–ø–µ–≤—Ç',
        'masseur': '–ú–∞—Å—Å–∞–∂–∏—Å—Ç',
        'doctor_physiotherapist': '–í—Ä–∞—á –õ–§–ö',
        'cosmetologist': '–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥'
    }
    user_id = callback_query.from_user.id
    —Å–æ—Å—Ç–æ—è–Ω–∏—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π[user_id] = {'doctor': doctor_map[callback_query.data]}
    keyboard = InlineKeyboardMarkup()
    today = datetime.date.today()
    weekdays = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞']
    
    added_days = 0
    day_offset = 0
    while added_days < 5:
        date = today + datetime.timedelta(days=day_offset)
        if date.weekday() < 5:  # Only add weekdays (Monday to Friday)
            weekday_name = weekdays[date.weekday()]
            keyboard.add(
                InlineKeyboardButton(f"{weekday_name}, {date.strftime('%d.%m.%Y')}", callback_data=f"weekday_{date.strftime('%Y-%m-%d')}")
            )
            added_days += 1
        day_offset += 1
    
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –¥–∞—Ç—É:", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data.startswith('weekday_'))
async def process_weekday(callback_query: types.CallbackQuery):
    selected_date = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id
    —Å–æ—Å—Ç–æ—è–Ω–∏—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π[user_id]['date'] = selected_date
    await bot.send_message(callback_query.from_user.id, f"–í—ã–±—Ä–∞–Ω {selected_date}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=generate_time_keyboard())

def generate_time_keyboard():
    keyboard = InlineKeyboardMarkup()
    for hour in range(9, 21):
        keyboard.add(
            InlineKeyboardButton(f"{hour}:00", callback_data=f"time_{hour}"),
        )
    return keyboard

@dp.callback_query_handler(lambda c: c.data.startswith('time_'))
async def process_time(callback_query: types.CallbackQuery):
    chosen_time = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id
    —Å–æ—Å—Ç–æ—è–Ω–∏—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π[user_id]['time'] = chosen_time
    await bot.send_message(callback_query.from_user.id, f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {chosen_time}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –§–ò–û –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ :")

@dp.message_handler(regexp=r'^[–ê-–Ø–∞-—è–Å—ë]+\s[–ê-–Ø–∞-—è–Å—ë]\.\s?[–ê-–Ø–∞-—è–Å—ë]?\.?$')
async def ask_birthdate(message: types.Message):
    user_id = message.from_user.id
    —Å–æ—Å—Ç–æ—è–Ω–∏—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π[user_id]['fullname'] = message.text
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.1990):")

@dp.message_handler(regexp=r'^\d{2}\.\d{2}.\d{4}$')
async def save_birthdate(message: types.Message):
    user_id = message.from_user.id
    —Å–æ—Å—Ç–æ—è–Ω–∏—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π[user_id]['birthdate'] = message.text
    user_data = —Å–æ—Å—Ç–æ—è–Ω–∏—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.get(user_id, {})
    fullname = user_data.get('fullname')
    birthdate = user_data.get('birthdate')
    chosen_time = user_data.get('time')
    selected_date = user_data.get('date')
    doctor = user_data.get('doctor')
    if fullname and birthdate and chosen_time and selected_date and doctor:
        group_chat_id = '-1002129410883'
        await bot.send_message(group_chat_id, f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏–µ–º:\n–§–ò–û –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {fullname}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthdate}\n–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {selected_date}\n–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {chosen_time}\n–í—Ä–∞—á: {doctor}")
        save_to_db(user_id, fullname, birthdate, chosen_time, doctor, selected_date)
        await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.")
        —Å–æ—Å—Ç–æ—è–Ω–∏—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.pop(user_id)
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")



dp.register_message_handler(ask_birthdate)
dp.register_message_handler(save_birthdate)
-1002129410883





if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)